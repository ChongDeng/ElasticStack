<?xml version="1.0" encoding="UTF-8"?>

<!--1 Configuration后面的status: 用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--2 monitorInterval：Log4j2能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="WARN" monitorInterval="30">

    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <Properties>
        <!--开发环境-->
        <Property name="LOG_PATH">C:/Users/fqyya/Desktop/temp3</Property>
        <!--生产环境-->
        <!--<Property name="LOG_PATH">/opt/loadbalance/web_service_logs</Property>-->
        <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
    </Properties>

    <Appenders>
        <Console name="ConsoleAppender" target="SYSTEM_OUT" follow="true">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>

            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>

        <!-- Rolling File Appender -->
        <RollingFile name="RollingFileInfo" fileName="${LOG_PATH}/hello.log"
                     filePattern="${LOG_PATH}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="${LOG_PATTERN}"/>

            <Policies>
                <!-- 归档每天的文件 -->
                <!-- interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，
                     interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!-- 限制单个文件大小 -->
                <SizeBasedTriggeringPolicy size="50 MB" />
            </Policies>
            <!-- 限制每天文件个数  DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy compressionLevel="0" max="25"/>
        </RollingFile>

        <Socket name="Socket" host="127.0.0.1" port="4560">
            <JsonLayout compact="true" eventEol="true" />
        </Socket>
    </Appenders>

    <!--Loggers节点，常见的有两种:Root和Logger.-->
    <Loggers>

        <!--&lt;!&ndash; 异步发送logstash &ndash;&gt;-->
        <!--&lt;!&ndash; 如果使用<asyncRoot> 或 <asyncLogger>，includeLocation="true"是必须要设置才会有类路径等一些信息打印出来 &ndash;&gt;-->
        <!--<AsyncLogger name="com.xinyartech" level="info" includeLocation="true" >-->
            <!--<appender-ref ref="logstash-tcp" />-->
        <!--</AsyncLogger>-->

        <Root level="error">
            <!--<AppenderRef ref="ConsoleAppender" /> -->
            <AppenderRef ref="RollingFileInfo" />
            <AppenderRef ref="Socket"/>
        </Root>

        <!-- Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
               name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点. -->
        <logger name="com.example.demo5" level="info"/>

    </Loggers>
</Configuration>